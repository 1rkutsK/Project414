from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters, CallbackQueryHandler, ConversationHandler
)
from openpyxl import load_workbook
from apscheduler.schedulers.background import BackgroundScheduler
import datetime
import calendar
import os
import requests
import json
import pytz

TOKEN = "–¢–û–ö–ï–ù"
WEATHER_API_KEY = "–¢–û–ö–ï–ù"  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
CITY_NAME = "Moscow"  # –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ADMINS = [–ê–ô–î–ò]
DEFAULT_NOTIFICATION_TIME = 20  # –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (20:00)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_NOTE = 1
WAITING_FOR_FILE = 2
WAITING_FOR_SEARCH = 3
WAITING_FOR_DELETE = 4
WAITING_FOR_TIME = 5

user_groups = {}
subscribed_users = set()
user_notification_times = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
schedule_data = []
available_groups = []
current_day_selections = {}
current_week_offsets = {}
user_notes = {}  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {user_id: {date_str: note}}
user_calendar_date = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ


def load_schedule():
    global schedule_data, available_groups
    schedule_data = []
    available_groups = []
    directions = set()

    if not os.path.exists("schedule.xlsx"):
        return

    wb = load_workbook("schedule.xlsx")
    ws = wb.active

    for row in ws.iter_rows(min_row=2, values_only=True):
        group = row[0]
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã
        if not group:
            continue

        day = row[1]
        time = row[2]
        type_ = row[3]
        subject = row[4]
        room = row[5]
        teacher = row[6] if len(row) > 6 else ""
        subgroup = row[7] if len(row) > 7 else None
        week_num = row[8] if len(row) > 8 else None

        schedule_data.append({
            'group': group,
            'day': day,
            'time': time,
            'type': type_,
            'subject': subject,
            'room': str(room).strip(),
            'teacher': str(teacher).strip() if teacher else "",
            'subgroup': str(subgroup).strip() if subgroup else None,
            'week_num': int(week_num) if week_num in (1, 2) else None
        })

        directions.add(group[:3])

    available_groups = sorted(set(item['group'] for item in schedule_data if item['group']))
    return sorted(directions)


def get_current_week(date):
    # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (26 –º–∞—è 2024) - –ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è
    start_date = datetime.datetime(2024, 5, 26)
    delta = date - start_date
    if delta.days < 0:
        # –î–ª—è –¥–∞—Ç –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã —Å—á–∏—Ç–∞–µ–º –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        delta_weeks = abs(delta.days) // 7 + 1
        return 1 if delta_weeks % 2 == 0 else 2
    else:
        # –î–ª—è –¥–∞—Ç –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        delta_weeks = delta.days // 7
        return 1 if delta_weeks % 2 == 0 else 2


def get_schedule_by_date(group, date, week_offset=0):
    current_week = get_current_week(date)

    weekday = date.strftime("%A")
    date_str = date.strftime("%d %B %Y").replace("January", "—è–Ω–≤–∞—Ä—è").replace("February", "—Ñ–µ–≤—Ä–∞–ª—è") \
        .replace("March", "–º–∞—Ä—Ç–∞").replace("April", "–∞–ø—Ä–µ–ª—è").replace("May", "–º–∞—è") \
        .replace("June", "–∏—é–Ω—è").replace("July", "–∏—é–ª—è").replace("August", "–∞–≤–≥—É—Å—Ç–∞") \
        .replace("September", "—Å–µ–Ω—Ç—è–±—Ä—è").replace("October", "–æ–∫—Ç—è–±—Ä—è") \
        .replace("November", "–Ω–æ—è–±—Ä—è").replace("December", "–¥–µ–∫–∞–±—Ä—è")
    russian_days = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    day_rus = russian_days.get(weekday, "")

    lessons = [
        item for item in schedule_data
        if item['group'] == group
           and item['day'] == day_rus
           and (item['week_num'] is None or item['week_num'] == current_week)
    ]

    if not lessons:
        return f"\U0001F4C5 {date_str} {day_rus}\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."

    grouped_lessons = {}
    for lesson in lessons:
        key = (lesson['time'], lesson['subject'], lesson['type'])
        if key not in grouped_lessons:
            grouped_lessons[key] = []
        grouped_lessons[key].append(lesson)

    lessons_sorted = sorted(grouped_lessons.items(),
                            key=lambda x: datetime.datetime.strptime(x[0][0].split("-")[0], "%H:%M"))

    week_type = "–í—Ç–æ—Ä–∞—è" if current_week == 2 else "–ü–µ—Ä–≤–∞—è"
    result = f"\U0001F4C5 {date_str} {day_rus} ({week_type} –Ω–µ–¥–µ–ª—è)\n\n"

    for (time, subject, type_), sub_lessons in lessons_sorted:
        pair_num = get_pair_number(time)
        result += f"<b>{pair_num} –ø–∞—Ä–∞, {time}</b>\n[{type_}]\n<b>{subject}</b>\n"
        if len(sub_lessons) > 1 or sub_lessons[0]['subgroup']:
            for sub in sub_lessons:
                subgroup_info = f" (–ø/–≥—Ä {sub['subgroup']})" if sub['subgroup'] else ""
                result += f"‚îú‚îÄ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {sub['room']}\n‚îú‚îÄ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {sub['teacher']}{subgroup_info}\n"
        else:
            result += f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {sub_lessons[0]['room']}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {sub_lessons[0]['teacher']}\n"
        result += "\n"

    return result


def get_pair_number(time_str):
    time_ranges = [
        ("8:30-9:50", 1), ("10:05-11:25", 2), ("11:40-13:00", 3),
        ("13:45-15:05", 4), ("15:20-16:40", 5), ("16:55-18:15", 6),
        ("18:30-19:50", 7), ("20:00-21:20", 8)
    ]
    return next((num for t, num in time_ranges if t == time_str), 1)


def create_calendar_keyboard(year: int, month: int):
    keyboard = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    keyboard.append([InlineKeyboardButton(
        f"{month_names[month - 1]} {year}",
        callback_data="ignore"
    )])

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_of_week = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in days_of_week])

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü
    cal = calendar.monthcalendar(year, month)

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                row.append(InlineKeyboardButton(
                    str(day),
                    callback_data=f"calendar_{year}_{month}_{day}"
                ))
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    nav_row.extend([
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"month_{prev_year}_{prev_month}"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_calendar"),
        InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"month_{next_year}_{next_month}")
    ])
    keyboard.append(nav_row)

    return InlineKeyboardMarkup(keyboard)


def create_admin_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="upload_schedule")],
        [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="go_back_to_main")]
    ])


async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    await update.message.reply_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=create_admin_keyboard()
    )


def create_main_menu_keyboard(user_id):
    keyboard = []
    is_subscribed = user_id in subscribed_users
    subscription_text = "üì¨ –†–∞—Å—Å—ã–ª–∫–∞: –í–∫–ª" if is_subscribed else "üì≠ –†–∞—Å—Å—ã–ª–∫–∞: –í—ã–∫–ª"
    notification_time = get_user_notification_time(user_id)

    if user_id in ADMINS:
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

    keyboard.extend([
        [InlineKeyboardButton("üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="show_calendar")],
        [InlineKeyboardButton("üóÇ –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="notes_menu")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â–Ω–∏–∫", callback_data="ai_assistant")],
        [InlineKeyboardButton(subscription_text, callback_data="toggle_subscription")],
        [InlineKeyboardButton(f"‚è∞ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {notification_time:02d}:00", callback_data="set_time")],
        [InlineKeyboardButton("üë• –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group")]
    ])

    return InlineKeyboardMarkup(keyboard)


def create_notes_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="search_text")],
        [InlineKeyboardButton("üìÖ –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ", callback_data="search_date")],
        [InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏", callback_data="show_all")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="delete_note")],
        [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="go_back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_course_from_group(group: str) -> int:
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã
    for char in group:
        if char.isdigit():
            return int(char)
    return 0


def create_course_keyboard():
    if not available_groups:
        return None

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã
    courses = sorted(set(get_course_from_group(group) for group in available_groups))

    keyboard = []
    for course in courses:
        if course > 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton(f"{course} –∫—É—Ä—Å", callback_data=f"course_{course}")])

    if len(keyboard) == 0:
        return None

    return InlineKeyboardMarkup(keyboard)


def create_direction_keyboard_for_course(course: int):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    directions = set()
    for group in available_groups:
        if get_course_from_group(group) == course:
            directions.add(group[:3])

    keyboard = []
    for direction in sorted(directions):
        keyboard.append([InlineKeyboardButton(direction, callback_data=f"initial_direction_{direction}")])

    keyboard.append([InlineKeyboardButton("‚óÄ –ö –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞", callback_data="back_to_courses")])
    return InlineKeyboardMarkup(keyboard)


def create_groups_keyboard_for_direction(direction: str, course: int):
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∫—É—Ä—Å–∞
    groups = sorted([
        group for group in available_groups
        if group.startswith(direction) and get_course_from_group(group) == course
    ])

    buttons = [[InlineKeyboardButton(group, callback_data=f"initial_group_{group}")] for group in groups]
    buttons.append([InlineKeyboardButton("‚óÄ –ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", callback_data=f"back_to_directions_{course}")])
    return InlineKeyboardMarkup(buttons)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    current_week_offsets[user_id] = 0

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if not available_groups:
        if user_id in ADMINS:
            await update.message.reply_text(
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=create_admin_keyboard()
            )
        else:
            await update.message.reply_text(
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
    keyboard = create_course_keyboard()
    if keyboard:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def request_schedule_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx)",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄ –û—Ç–º–µ–Ω–∞", callback_data="cancel_upload")
        ]])
    )
    return WAITING_FOR_FILE


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMINS:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.",
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return

    document = update.message.document
    if not document.file_name.endswith(".xlsx"):
        await update.message.reply_text(
            "–ù—É–∂–µ–Ω —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx",
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return

    file = await context.bot.get_file(document.file_id)
    await file.download_to_drive("schedule.xlsx")
    load_schedule()

    await update.message.reply_text(
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!",
        reply_markup=create_main_menu_keyboard(user_id)
    )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫ AI
    if ("–∫–æ–≥–¥–∞" in text.lower() and "—Å–ª–µ–¥—É—é—â" in text.lower()) or \
            ("—Å–∫–æ–ª—å–∫–æ" in text.lower() and "–ø–∞—Ä" in text.lower() and "–Ω–µ–¥–µ–ª" in text.lower()):
        await handle_ai_request(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    if context.user_data.get('waiting_for_delete'):
        del context.user_data['waiting_for_delete']
        try:
            date_obj = datetime.datetime.strptime(text, "%d.%m.%Y")
            if delete_note(user_id, date_obj):
                await update.message.reply_text(
                    f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –Ω–∞ {text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                    reply_markup=create_notes_menu_keyboard()
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–∞ {text} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                    reply_markup=create_notes_menu_keyboard()
                )
        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25.03.2024",
                reply_markup=create_notes_menu_keyboard()
            )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if context.user_data.get('waiting_for_search'):
        search_type = context.user_data.get('search_type')
        del context.user_data['waiting_for_search']

        if search_type == "search_date":
            try:
                date_obj = datetime.datetime.strptime(text, "%d.%m.%Y")
                search_date = date_obj.strftime("%Y-%m-%d")
                result = search_notes(user_id, date_str=search_date)
            except ValueError:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25.03.2024",
                    reply_markup=create_notes_menu_keyboard()
                )
                return
        else:
            result = search_notes(user_id, query=text)

        await update.message.reply_text(
            result,
            reply_markup=create_notes_menu_keyboard()
        )
        return

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞...
    if user_id in user_calendar_date:
        selected_date = user_calendar_date[user_id]
        save_note(user_id, selected_date, text)
        del user_calendar_date[user_id]

        await update.message.reply_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –Ω–∞ {selected_date.strftime('%d.%m.%Y')} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã
    group = text.upper()
    if group not in available_groups:
        await update.message.reply_text(
            "‚ùå –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return

    user_groups[user_id] = group
    await show_schedule_with_day_selector(update, context, user_id, group)


def create_direction_keyboard():
    directions = sorted(set(group[:3] for group in available_groups))
    buttons = [[InlineKeyboardButton(direction, callback_data=f"direction_{direction}")] for direction in directions]
    buttons.append([InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="go_back_to_main")])
    return InlineKeyboardMarkup(buttons)


def create_groups_keyboard(direction):
    groups = sorted([group for group in available_groups if group.startswith(direction)])
    buttons = [[InlineKeyboardButton(group, callback_data=f"group_{group}")] for group in groups]
    buttons.append([InlineKeyboardButton("‚óÄ –ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", callback_data="back_to_directions")])
    return InlineKeyboardMarkup(buttons)


def create_day_selector_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ü–Ω", callback_data="day_mon"),
            InlineKeyboardButton("–í—Ç", callback_data="day_tue"),
            InlineKeyboardButton("–°—Ä", callback_data="day_wed"),
            InlineKeyboardButton("–ß—Ç", callback_data="day_thu")
        ],
        [
            InlineKeyboardButton("–ü—Ç", callback_data="day_fri"),
            InlineKeyboardButton("–°–±", callback_data="day_sat"),
            InlineKeyboardButton("–í—Å", callback_data="day_sun"),
            InlineKeyboardButton("‚úî –°–µ–≥–æ–¥–Ω—è", callback_data="day_today")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data="prev_week"),
            InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚ñ∂Ô∏è", callback_data="next_week")
        ],
        [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="go_back_to_main")]
    ])


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "admin_panel":
        if user_id in ADMINS:
            await query.edit_message_text(
                "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=create_admin_keyboard()
            )
        return

    elif query.data == "notes_menu":
        await query.edit_message_text(
            "üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏:",
            reply_markup=create_notes_menu_keyboard()
        )
        return

    elif query.data == "show_all":
        result = search_notes(user_id)
        keyboard = [[InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="notes_menu")]]
        await query.edit_message_text(
            result,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    elif query.data in ["search_text", "search_date"]:
        context.user_data['search_type'] = query.data
        keyboard = [[InlineKeyboardButton("‚óÄ –û—Ç–º–µ–Ω–∞", callback_data="notes_menu")]]
        if query.data == "search_text":
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        context.user_data['waiting_for_search'] = True
        return

    elif query.data == "upload_schedule":
        return await request_schedule_file(update, context)

    elif query.data == "cancel_upload":
        await query.edit_message_text(
            "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return ConversationHandler.END

    elif query.data == "show_calendar":
        today = datetime.datetime.now()
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=create_calendar_keyboard(today.year, today.month)
        )
        return

    elif query.data.startswith("month_"):
        _, year, month = query.data.split("_")
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=create_calendar_keyboard(int(year), int(month))
        )
        return

    elif query.data.startswith("calendar_"):
        _, year, month, day = query.data.split("_")
        selected_date = datetime.datetime(int(year), int(month), int(day))
        user_calendar_date[user_id] = selected_date

        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –¥–∞—Ç—ã {selected_date.strftime('%d.%m.%Y')}:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄ –û—Ç–º–µ–Ω–∞", callback_data="cancel_note")
            ]])
        )
        return WAITING_FOR_NOTE

    elif query.data == "cancel_note" or query.data == "cancel_calendar":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return

    elif query.data == "view_schedule":
        if not available_groups:
            if user_id in ADMINS:
                await query.edit_message_text(
                    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
                    reply_markup=create_main_menu_keyboard(user_id)
                )
            else:
                await query.edit_message_text(
                    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=create_main_menu_keyboard(user_id)
                )
        else:
            group = user_groups.get(user_id)
            if not group:
                keyboard = create_initial_group_keyboard()
                await query.edit_message_text(
                    "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                    reply_markup=keyboard
                )
            else:
                current_day_selections[user_id] = datetime.datetime.now()
                await show_schedule_with_day_selector(update, context, user_id, group)
        return

    elif query.data == "back_to_directions":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=create_direction_keyboard()
        )
        return

    elif query.data == "go_back_to_main":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return

    elif query.data.startswith("direction_"):
        direction = query.data.split("_")[1]
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction}:",
            reply_markup=create_groups_keyboard(direction)
        )
        return

    elif query.data.startswith("group_"):
        group = query.data.split("_")[1]
        user_groups[user_id] = group
        current_day_selections[user_id] = datetime.datetime.now()
        await show_schedule_with_day_selector(update, context, user_id, group)
        return

    elif query.data == "day_today":
        group = user_groups.get(user_id, "")
        today = datetime.datetime.now()
        current_day_selections[user_id] = today
        await show_schedule_with_day_selector(update, context, user_id, group, today)
        return

    elif query.data.startswith("day_"):
        day_map = {
            "mon": 0, "tue": 1, "wed": 2,
            "thu": 3, "fri": 4, "sat": 5, "sun": 6
        }
        day_key = query.data.split("_")[1]
        if day_key in day_map:
            current_date = current_day_selections.get(user_id, datetime.datetime.now())
            monday_of_week = current_date - datetime.timedelta(days=current_date.weekday())
            selected_date = monday_of_week + datetime.timedelta(days=day_map[day_key])
            current_day_selections[user_id] = selected_date

            group = user_groups.get(user_id, "")
            await show_schedule_with_day_selector(update, context, user_id, group, selected_date)
        return

    elif query.data in ["prev_week", "next_week"]:
        group = user_groups.get(user_id, "")
        if not group:
            await query.edit_message_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.",
                reply_markup=create_main_menu_keyboard(user_id)
            )
            return

        current_date = current_day_selections.get(user_id, datetime.datetime.now())
        monday_of_week = current_date - datetime.timedelta(days=current_date.weekday())
        new_date = monday_of_week + datetime.timedelta(weeks=(-1 if query.data == "prev_week" else 1))
        new_date = new_date + datetime.timedelta(days=current_date.weekday())
        current_day_selections[user_id] = new_date

        await show_schedule_with_day_selector(update, context, user_id, group, new_date)
        return

    elif query.data == "toggle_subscription":
        if user_id in subscribed_users:
            subscribed_users.remove(user_id)
            await query.answer("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É.")
        else:
            subscribed_users.add(user_id)
            await query.answer("–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É.")
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return

    elif query.data == "delete_note":
        if user_id not in user_notes or not user_notes[user_id]:
            await query.edit_message_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.",
                reply_markup=create_notes_menu_keyboard()
            )
            return

        context.user_data['waiting_for_delete'] = True
        keyboard = [[InlineKeyboardButton("‚óÄ –û—Ç–º–µ–Ω–∞", callback_data="notes_menu")]]
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.03.2024",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    elif query.data == "ai_assistant":
        keyboard = [[InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="go_back_to_main")]]
        message = await query.edit_message_text(
            "‚ùì –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫! –í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è:\n\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è [–ø—Ä–µ–¥–º–µ—Ç]?\n"
            "‚Ä¢ –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–∞—Ä –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['last_assistant_message'] = message.message_id
        return

    elif query.data.startswith("course_"):
        course = int(query.data.split("_")[1])
        context.user_data['selected_course'] = course
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ({course} –∫—É—Ä—Å):",
            reply_markup=create_direction_keyboard_for_course(course)
        )
        return

    elif query.data == "back_to_courses":
        keyboard = create_course_keyboard()
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
            reply_markup=keyboard
        )
        return

    elif query.data.startswith("initial_direction_"):
        direction = query.data.replace("initial_direction_", "")
        course = context.user_data.get('selected_course')
        if course:
            await query.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction} ({course} –∫—É—Ä—Å):",
                reply_markup=create_groups_keyboard_for_direction(direction, course)
            )
        return

    elif query.data.startswith("back_to_directions_"):
        course = int(query.data.split("_")[-1])
        context.user_data['selected_course'] = course
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ({course} –∫—É—Ä—Å):",
            reply_markup=create_direction_keyboard_for_course(course)
        )
        return

    elif query.data.startswith("initial_group_"):
        group = query.data.replace("initial_group_", "")
        user_groups[user_id] = group
        await query.edit_message_text(
            f"‚úÖ –ì—Ä—É–ø–ø–∞ {group} –≤—ã–±—Ä–∞–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return

    elif query.data == "change_group":
        keyboard = create_course_keyboard()
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
            reply_markup=keyboard
        )
        return

    elif query.data == "set_time":
        await set_notification_time(update, context)
        return

    elif query.data.startswith("time_"):
        hour = int(query.data.split("_")[1])
        user_id = query.from_user.id
        user_notification_times[user_id] = hour

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        scheduler = context.job_queue
        user_jobs = scheduler.get_jobs_by_name(f"daily_notification_{user_id}")
        for job in user_jobs:
            job.schedule_removal()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        scheduler.run_daily(
            send_daily_schedule,
            time=datetime.time(hour=hour, minute=0),
            name=f"daily_notification_{user_id}"
        )

        await query.edit_message_text(
            f"‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:00",
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return


async def show_schedule_with_day_selector(update, context, user_id, group, date=None):
    if date is None:
        date = datetime.datetime.now()

    schedule = get_schedule_by_date(group, date)
    keyboard = create_day_selector_keyboard()

    if isinstance(update, Update):
        if update.message:
            await update.message.reply_text(schedule, parse_mode='HTML', reply_markup=keyboard)
        elif update.callback_query:
            await update.callback_query.edit_message_text(schedule, parse_mode='HTML', reply_markup=keyboard)
    else:
        await update.edit_message_text(schedule, parse_mode='HTML', reply_markup=keyboard)


def get_weather_forecast(city=CITY_NAME):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            tomorrow_forecasts = []
            tomorrow = datetime.datetime.now() + datetime.timedelta(days=1)
            tomorrow_date = tomorrow.strftime('%Y-%m-%d')

            for item in data['list']:
                forecast_time = datetime.datetime.fromtimestamp(item['dt'])
                if forecast_time.strftime('%Y-%m-%d') == tomorrow_date:
                    hour = forecast_time.hour
                    if hour in [12, 18]:  # –ë–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å (12:00) –∏ –≤–µ—á–µ—Ä (18:00)
                        tomorrow_forecasts.append({
                            'temp': item['main']['temp'],
                            'description': item['weather'][0]['description'],
                            'time': '–¥–Ω–µ–º' if hour == 12 else '–±–ª–∏–∂–µ –∫ –≤–µ—á–µ—Ä—É'
                        })

            if tomorrow_forecasts:
                forecast_text = "üëã –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!\n\n–ó–∞–≤—Ç—Ä–∞ "
                for forecast in tomorrow_forecasts:
                    forecast_text += f"{forecast['time']}üò¨ üå°Ô∏è {forecast['temp']:.1f}¬∞C, {forecast['description']}, "
                return forecast_text.rstrip(', ') + ".\n\n"
        return "üëã –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!\n\n"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return "üëã –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!\n\n"


def save_note(user_id: int, date: datetime.datetime, note: str):
    date_str = date.strftime("%Y-%m-%d")
    if user_id not in user_notes:
        user_notes[user_id] = {}
    user_notes[user_id][date_str] = note.strip()


def get_note(user_id: int, date: datetime.datetime) -> str:
    date_str = date.strftime("%Y-%m-%d")
    return user_notes.get(user_id, {}).get(date_str, "")


async def add_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in user_groups:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É!")
        return ConversationHandler.END

    date = current_day_selections.get(user_id, datetime.datetime.now())
    date_str = date.strftime("%Y-%m-%d")
    context.user_data['note_date'] = date_str

    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è {date_str}:\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    return WAITING_FOR_NOTE


async def save_note_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    note_text = update.message.text
    date_str = context.user_data.get('note_date')

    if date_str:
        date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
        save_note(user_id, date, note_text)
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="go_back_to_main")
        ]])
        formatted_date = format_date_russian(date)
        await update.message.reply_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –Ω–∞ {formatted_date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            reply_markup=keyboard
        )

    return ConversationHandler.END


async def cancel_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


async def send_daily_schedule(context: ContextTypes.DEFAULT_TYPE, user_ids=None):
    tomorrow = datetime.datetime.now() + datetime.timedelta(days=1)
    weather = get_weather_forecast()

    # –ï—Å–ª–∏ user_ids –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    target_users = user_ids if user_ids else subscribed_users

    for user_id in target_users:
        if user_id not in user_groups:
            continue

        group = user_groups[user_id]
        schedule = get_schedule_by_date(group, tomorrow)
        note = get_note(user_id, tomorrow)

        message = weather
        message += "–ü–∞—Ä—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
        message += schedule

        if note:
            message += f"\n‚ùó‚ùó‚ùó–¢—ã —Ö–æ—Ç–µ–ª –Ω–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ —ç—Ç–æ:\n{note}"

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="go_back_to_main")
        ]])

        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"Error sending message to user {user_id}: {e}")


async def test_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await send_daily_schedule(context)
    await update.message.reply_text("–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")


def format_date_russian(date):
    return date.strftime("%d %B %Y").replace("January", "—è–Ω–≤–∞—Ä—è").replace("February", "—Ñ–µ–≤—Ä–∞–ª—è") \
        .replace("March", "–º–∞—Ä—Ç–∞").replace("April", "–∞–ø—Ä–µ–ª—è").replace("May", "–º–∞—è") \
        .replace("June", "–∏—é–Ω—è").replace("July", "–∏—é–ª—è").replace("August", "–∞–≤–≥—É—Å—Ç–∞") \
        .replace("September", "—Å–µ–Ω—Ç—è–±—Ä—è").replace("October", "–æ–∫—Ç—è–±—Ä—è") \
        .replace("November", "–Ω–æ—è–±—Ä—è").replace("December", "–¥–µ–∫–∞–±—Ä—è")


def search_notes(user_id: int, query: str = None, date_str: str = None) -> str:
    if user_id not in user_notes or not user_notes[user_id]:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'"

    found_notes = []

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
    if not query and not date_str:
        found_notes = [(date, text) for date, text in user_notes[user_id].items()]
    else:
        # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        for note_date, note_text in user_notes[user_id].items():
            # –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ
            if date_str and date_str in note_date:
                found_notes.append((note_date, note_text))
                continue

            # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
            if query and query.lower() in note_text.lower():
                found_notes.append((note_date, note_text))

    if not found_notes:
        if query or date_str:
            search_term = f"–¥–∞—Ç–µ {date_str}" if date_str else f"–∑–∞–ø—Ä–æ—Å—É '{query}'"
            return f"üîç –ó–∞–º–µ—Ç–∫–∏ –ø–æ {search_term} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
    found_notes.sort(key=lambda x: x[0], reverse=True)

    if not query and not date_str:
        result = "üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    else:
        search_term = f"–¥–∞—Ç–µ {date_str}" if date_str else f"–∑–∞–ø—Ä–æ—Å—É '{query}'"
        result = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ {search_term}:\n\n"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–º–µ—Ç–∫—É
    for note_date, note_text in found_notes:
        date_obj = datetime.datetime.strptime(note_date, "%Y-%m-%d")
        formatted_date = format_date_russian(date_obj)
        result += f"üìÖ {formatted_date}:\n{note_text}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
    total_notes = len(found_notes)
    result += f"\n–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {total_notes}"

    return result.strip()


async def show_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    result = search_notes(user_id)
    await update.message.reply_text(result)


async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="search_text")],
        [InlineKeyboardButton("üìÖ –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ", callback_data="search_date")],
        [InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏", callback_data="show_all")],
        [InlineKeyboardButton("‚óÄ –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=reply_markup
    )


async def handle_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "show_all":
        result = search_notes(user_id)
        await query.edit_message_text(result)
        return ConversationHandler.END

    elif query.data == "cancel_search":
        await query.edit_message_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        return ConversationHandler.END

    elif query.data in ["search_text", "search_date"]:
        context.user_data['search_type'] = query.data
        if query.data == "search_text":
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º:\n"
                "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel)"
            )
        else:
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
                "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel)"
            )
        return WAITING_FOR_SEARCH


async def handle_search_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    search_input = update.message.text

    if search_input == '/cancel':
        await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        return ConversationHandler.END

    search_type = context.user_data.get('search_type')

    if search_type == "search_date":
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è
            date_obj = datetime.datetime.strptime(search_input, "%d.%m.%Y")
            search_date = date_obj.strftime("%Y-%m-%d")
            result = search_notes(user_id, date_str=search_date)
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25.03.2024"
            )
            return WAITING_FOR_SEARCH
    else:
        result = search_notes(user_id, query=search_input)

    await update.message.reply_text(result)
    return ConversationHandler.END


def delete_note(user_id: int, date: datetime.datetime) -> bool:
    date_str = date.strftime("%Y-%m-%d")
    if user_id in user_notes and date_str in user_notes[user_id]:
        del user_notes[user_id][date_str]
        return True
    return False


def find_next_lesson(user_id: int, subject_query: str) -> str:
    if user_id not in user_groups:
        return "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!"

    group = user_groups[user_id]
    today = datetime.datetime.now()

    # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    subject_query = subject_query.lower()
    matching_subjects = set()
    for item in schedule_data:
        if item['group'] == group and subject_query in item['subject'].lower():
            matching_subjects.add(item['subject'])

    if not matching_subjects:
        return f"‚ùå –ü—Ä–µ–¥–º–µ—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ '{subject_query}', –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –ø–∞—Ä—É
    next_lessons = []
    for subject in matching_subjects:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
        for i in range(8):  # —Å–µ–≥–æ–¥–Ω—è + 7 –¥–Ω–µ–π
            check_date = today + datetime.timedelta(days=i)
            week_num = get_current_week(check_date)
            weekday = check_date.strftime("%A")
            russian_days = {
                "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
                "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞",
                "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            }
            day_rus = russian_days.get(weekday)

            # –ò—â–µ–º –ø–∞—Ä—ã —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
            for item in schedule_data:
                if (item['group'] == group and
                        item['subject'] == subject and
                        item['day'] == day_rus and
                        (item['week_num'] is None or item['week_num'] == week_num)):
                    next_lessons.append({
                        'subject': subject,
                        'date': check_date,
                        'time': item['time'],
                        'type': item['type'],
                        'room': item['room'],
                        'teacher': item['teacher'],
                        'days_until': i
                    })

    if not next_lessons:
        return f"‚ùå –ù–µ –Ω–∞—à–µ–ª –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_query}' –≤ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é."

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    next_lessons.sort(key=lambda x: (x['days_until'], x['time']))
    next_lesson = next_lessons[0]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if next_lesson['days_until'] == 0:
        day_str = "—Å–µ–≥–æ–¥–Ω—è"
    elif next_lesson['days_until'] == 1:
        day_str = "–∑–∞–≤—Ç—Ä–∞"
    else:
        day_str = format_date_russian(next_lesson['date'])

    return (f"üìö –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{next_lesson['subject']}':\n"
            f"üìÖ {day_str}, {next_lesson['time']}\n"
            f"üìù {next_lesson['type']}\n"
            f"üèõ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {next_lesson['room']}\n"
            f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {next_lesson['teacher']}")


def count_remaining_lessons(user_id: int) -> str:
    if user_id not in user_groups:
        return "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!"

    group = user_groups[user_id]
    today = datetime.datetime.now()
    current_week_num = get_current_week(today)

    # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–∞—Ä—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
    remaining_lessons = []
    for i in range(8):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        check_date = today + datetime.timedelta(days=i)
        if check_date.isocalendar()[1] != today.isocalendar()[1]:  # –µ—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
            break

        weekday = check_date.strftime("%A")
        russian_days = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞",
            "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        day_rus = russian_days.get(weekday)

        # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è, —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = None
        if i == 0:
            current_time = today.strftime("%H:%M")

        for item in schedule_data:
            if (item['group'] == group and
                    item['day'] == day_rus and
                    (item['week_num'] is None or item['week_num'] == current_week_num)):

                # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏ —É–∂–µ –ø–∞—Ä–∞
                if current_time:
                    lesson_end_time = item['time'].split('-')[1]
                    if current_time > lesson_end_time:
                        continue

                remaining_lessons.append({
                    'subject': item['subject'],
                    'date': check_date,
                    'time': item['time'],
                    'type': item['type']
                })

    if not remaining_lessons:
        return "üéâ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–∞—Ä!"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    remaining_lessons.sort(key=lambda x: (x['date'], x['time']))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    total = len(remaining_lessons)
    response = f"üìö –û—Å—Ç–∞–ª–æ—Å—å {total} –ø–∞—Ä –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n\n"

    current_date = None
    for lesson in remaining_lessons:
        if current_date != lesson['date']:
            current_date = lesson['date']
            if lesson['date'].date() == today.date():
                response += f"\nüìÖ –°–µ–≥–æ–¥–Ω—è:\n"
            elif lesson['date'].date() == (today + datetime.timedelta(days=1)).date():
                response += f"\nüìÖ –ó–∞–≤—Ç—Ä–∞:\n"
            else:
                response += f"\nüìÖ {lesson['date'].strftime('%d.%m.%Y')}:\n"

        response += f"‚è∞ {lesson['time']} - {lesson['subject']} ({lesson['type']})\n"

    return response


async def handle_ai_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞
    if user_id not in user_groups:
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="view_schedule"),
            InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="go_back_to_main")
        ]])
        message = await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É!\n"
            "–ù–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=keyboard
        )
        context.user_data['last_assistant_message'] = message.message_id
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if 'last_assistant_message' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=user_id,
                message_id=context.user_data['last_assistant_message']
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="go_back_to_main")
    ]])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    if "–∫–æ–≥–¥–∞" in text and "—Å–ª–µ–¥—É—é—â" in text:
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
        subject_words = text.split()
        for word in ["–∫–æ–≥–¥–∞", "—Å–ª–µ–¥—É—é—â", "—Å–ª–µ–¥—É—é—â–∞—è", "—Å–ª–µ–¥—É—é—â–∏–π", "–±—É–¥–µ—Ç"]:
            if word in subject_words:
                subject_words.remove(word)
        subject_query = " ".join(subject_words).strip()

        response = find_next_lesson(user_id, subject_query)
        message = await update.message.reply_text(response, reply_markup=keyboard)
        context.user_data['last_assistant_message'] = message.message_id
        return

    elif "—Å–∫–æ–ª—å–∫–æ" in text and ("–ø–∞—Ä" in text or "–∑–∞–Ω—è—Ç–∏–π" in text) and "–Ω–µ–¥–µ–ª" in text:
        response = count_remaining_lessons(user_id)
        message = await update.message.reply_text(response, reply_markup=keyboard)
        context.user_data['last_assistant_message'] = message.message_id
        return

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    message = await update.message.reply_text(
        "ü§î –Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è [–ø—Ä–µ–¥–º–µ—Ç]?\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–∞—Ä –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
        reply_markup=keyboard
    )
    context.user_data['last_assistant_message'] = message.message_id


def create_initial_group_keyboard():
    if not available_groups:
        return None

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    directions = sorted(set(group[:3] for group in available_groups))

    keyboard = []
    for direction in directions:
        keyboard.append([InlineKeyboardButton(direction, callback_data=f"initial_direction_{direction}")])

    if len(keyboard) == 0:
        return None

    return InlineKeyboardMarkup(keyboard)


def create_initial_groups_keyboard(direction):
    groups = sorted([group for group in available_groups if group.startswith(direction)])
    buttons = [[InlineKeyboardButton(group, callback_data=f"initial_group_{group}")] for group in groups]
    buttons.append([InlineKeyboardButton("‚óÄ –ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", callback_data="back_to_initial_directions")])
    return InlineKeyboardMarkup(buttons)


async def set_notification_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚óÄ –û—Ç–º–µ–Ω–∞", callback_data="go_back_to_main")
    ]])

    await query.edit_message_text(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 19:30 –∏–ª–∏ 20:00",
        reply_markup=keyboard
    )
    return WAITING_FOR_TIME


async def handle_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if ':' in text:
            hours, minutes = map(int, text.split(':'))
        else:
            hours = int(text)
            minutes = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            raise ValueError

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_notification_times[user_id] = hours

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        scheduler = context.job_queue
        user_jobs = scheduler.get_jobs_by_name(f"daily_notification_{user_id}")
        for job in user_jobs:
            job.schedule_removal()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        scheduler.run_daily(
            send_daily_schedule,
            time=datetime.time(hour=hours, minute=minutes),
            name=f"daily_notification_{user_id}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hours:02d}:{minutes:02d}",
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return ConversationHandler.END

    except (ValueError, IndexError):
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄ –û—Ç–º–µ–Ω–∞", callback_data="go_back_to_main")
        ]])
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 19:30 –∏–ª–∏ 20:00",
            reply_markup=keyboard
        )
        return WAITING_FOR_TIME


def get_user_notification_time(user_id: int) -> int:
    return user_notification_times.get(user_id, DEFAULT_NOTIFICATION_TIME)


def main():
    load_schedule()
    application = ApplicationBuilder().token(TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    scheduler = BackgroundScheduler(timezone=pytz.timezone('Europe/Moscow'))

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user_id in subscribed_users:
        notification_time = get_user_notification_time(user_id)
        scheduler.add_job(
            lambda uid=user_id: application.job_queue.run_once(
                lambda ctx: send_daily_schedule(ctx, user_ids=[uid]), 0
            ),
            'cron',
            hour=notification_time,
            minute=0
        )
    scheduler.start()

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    time_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(set_notification_time, pattern="^set_time$")],
        states={
            WAITING_FOR_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time_input)
            ]
        },
        fallbacks=[CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern="^go_back_to_main$")],
        per_chat=True,
        per_message=False
    )

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_handler = ConversationHandler(
        entry_points=[CommandHandler('search', start_search)],
        states={
            WAITING_FOR_SEARCH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_input)
            ]
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)],
        per_chat=True,
        per_message=False
    )

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    file_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(request_schedule_file, pattern="^upload_schedule$")],
        states={
            WAITING_FOR_FILE: [
                MessageHandler(filters.Document.ALL, handle_document)
            ]
        },
        fallbacks=[CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern="^cancel_upload$")],
        per_chat=True,
        per_message=False
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", test_notification))
    application.add_handler(search_handler)
    application.add_handler(file_handler)
    application.add_handler(time_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CallbackQueryHandler(button_callback))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()
